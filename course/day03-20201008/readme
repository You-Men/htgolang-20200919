1. 复习(1小时)
for i := 0; i < len(array); i++ {
    i, array[i]
}

for i := range array {
    i, array[i]
}

for i, v := range array {
    i, v
}

nums := [...]int{1, 2, 3}
nums[:3] start end-1 = i:0, 1, 2 => {1, 2, 3}
nums[:2] i:0, 1 => {1, 2}

2. 课程

定义 函数(类型)
    const
    var
    func

func 函数名称(参数) [返回值类型] {

}
参数: 用于接收传递的变量
        参数传递 => 变量赋值的过程
        函数定义中的参数 => 形参

函数调用传递的参数 => 实参

// 无参函数
func sayHello() {
    fmt.Println("hello")
}


函数：
    定义:
        func 函数名(形参) 返回值 {
            函数体
        }
        函数名: 满足标识符规范
        形参: 无形参
                参数省略
              有形参: 名字 类型, 多个形参使用逗号分隔
                     连续多个形参类型一致 => 合并参数类型
                     可以接受任意多个相同类型变量 => 可变参数
        返回值:
            无返回值
                返回值省略
            有返回值:
                return关键字
                必须指定返回值类型
                    返回值非命名方式
                        只有一个返回值 返回值只需要写类型, 可以省略小括号
                        如果有多个返回值 需要用小括号包含所有返回值类型
                        return 返回值数量必须和函数定义返回值类型数量一致
                    命名返回值
                        返回值定义值为每个返回值指定变量名称及类型, 用括号包含
                        返回是只用指定return
                        若连续多个返回值类型相同 => 返回值类型合并

    调用:
        接收返回值 = 函数名(实参)
        非可变参数：
            实参数量必须与形参一致 => 实参 按照顺序传递给形参
        可变参数:
            可变参数定义之前的变量 必须指定实参传递
            可变参数部分可以传递任意多个值(可使用切片解包)

        返回值：
            无返回值不能接收
            有返回值 必须用相同数量的变量接收返回值(按照返回值的顺序赋值给接收的变量)

函数类型
    func(参数类型列表) 返回值类型列表